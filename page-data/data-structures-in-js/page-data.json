{"componentChunkName":"component---src-templates-blog-post-js","path":"/data-structures-in-js/","result":{"data":{"site":{"siteMetadata":{"title":"bwake blog"}},"markdownRemark":{"id":"cdc0c3eb-2e4a-5497-99d3-9507ffd14a18","excerpt":"Data Structure is a way of organizing data so that it can be used effectively. An algorithm is a sequence of instructions to solve a clearly defined problemâ€¦","html":"<p><strong>Data Structure</strong> is a way of organizing data so that it can be used effectively.</p>\n<p>An <strong>algorithm</strong> is a sequence of instructions to solve a clearly defined problem.\nThe best algorithm is the one which has the best performance.</p>\n<p><strong>Abstract data types</strong> are abstraction of data which provides only the interface to which a data structure must adhere to.\nThe interface does not give any specific details about how something should be done.</p>\n<h4>Importance</h4>\n<ul>\n<li>Code performance</li>\n<li>Trade offs among different approaches</li>\n<li>Identifying inefficiencies</li>\n<li>Interviews</li>\n</ul>\n<h3>Factors to consider when designing a data structure</h3>\n<ul>\n<li>Speed - how fast</li>\n<li>Memory - less memory intensive</li>\n<li>Readability - more readble code</li>\n</ul>\n<p>The problem with <em>time</em> facto is that:</p>\n<ul>\n<li><em>different or same machine record different time</em></li>\n</ul>\n<p>using browser console to test time\nHere when the number of input(n) increases it increases the number of iterations consequently increasing the time in a linear way.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstart <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sumUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nend <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nend <span class=\"token operator\">-</span> start</code></pre></div>\n<ul>\n<li><em>speed might not be precise</em></li>\n</ul>\n<h2>Big O Notation</h2>\n<p>It allows us to talk formally how the runtime of an input grows as the input grows.\nIt gives you an upper bound on the complexity in the worst case, helping to quantify performance as input size becomes arbitrary large</p>\n<ul>\n<li>Arithmetic operations are constant</li>\n<li>Variable assignment is constant</li>\n<li>Acessing elements in an array(by index) or object (by key) is constant.</li>\n<li>In a loop, the time complexity is the length of the loop times the complexity or whatever happens inside the loop.</li>\n</ul>\n<p><strong>Space Complexity</strong> - refers to how much additional memory is needed to be allocated in order to run the code in our algorithm.</p>\n<p><strong>Time Complexity</strong> - Analyze runtime as the size of the input increases.</p>\n<p><strong>Auxiliary Space</strong> - space required by the algorithm, not including space taken by the input</p>\n<p>Suppose we have a problem to write a function that that calculates the sum of all numbers from one upto and inclunding a certain number <code class=\"language-text\">n</code>.</p>\n<p>The shorter <code class=\"language-text\">solution 2</code> runs in a shorter amount of time than <code class=\"language-text\">solution 1</code>.\nThe number of operations in <code class=\"language-text\">solution 1</code> grows as n increases.\nThe number of operations in <code class=\"language-text\">solution 2</code> remains constant(3) despite the value of <code class=\"language-text\">n</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//solution 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addUpTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    total <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> startTime<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> stopTime<span class=\"token punctuation\">;</span>\nstartTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addUpTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstopTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stopTime <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//solution 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addUpToN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstartTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addUpToN</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstopTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stopTime <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Asymptomatic Analysis</h3>\n<p>Is amethod of derivind Big 0.\nSteps:</p>\n<ul>\n<li>Define a function i.e mathematical function of the time complexity by counting the number of expression operations.</li>\n<li>Find the fastest groowing term.</li>\n<li>Remove the co-efficient.</li>\n</ul>\n<p>In some operations the size of the input has no effect on the time it takes the algorithm to run.\neg.using mathematical formulas.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstart <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sumUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nend <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nend <span class=\"token operator\">-</span> start</code></pre></div>\n<h3>Order of Complexities</h3>\n<p>Starting from the <em>smallest</em> to the <em>largest</em>.</p>\n<ul>\n<li>Constant Time: <strong>0(1)</strong></li>\n<li>Logarithmic Time: <strong>0(log(n))</strong></li>\n<li>Linear Time: <strong>0(n)</strong></li>\n<li>Linearithmic Time: <strong>0(nlog(n))</strong></li>\n<li>Quadratic Time: <strong>0(n<sup>2</sup>)</strong></li>\n<li>Cubic Time: <strong>0(n<sup>3</sup>)</strong></li>\n<li>Exponential Time: <strong>0(b<sup>n</sup>), b > 1</strong></li>\n<li>Factorial Time: <strong>0(n!)</strong></li>\n</ul>\n<h3>Static and Dynamic Arrays</h3>\n<p>A <strong>static array</strong> is a fixed length container containing <em>n</em> elements <em>indexable</em>(each slot can be refernced with a number) from the range of [0, n-1]</p>\n<p><strong>Dynamic arrays</strong> can grow and shrink in size</p>\n<h3>Singly and Doubly linked list</h3>\n<p><em>Singly linked list</em> uses less memory, has a simpler implementaion and itâ€™s not easy to access the previous element.</p>\n<p><em>Doubly linked list</em> can be traversed backwards and it takes 2 times the memory.</p>\n<p><em>Head</em> refers to the first node in a linked list.\n<em>Tail</em> refers to the last item in the node.\n<em>Pointer</em> reference another node.\n<em>Node</em> is an object containing data.</p>\n<p><em>Stack</em> is a one ended liner data structure models a real world stack by having two primary operations ie. push, pop.\n<em>Queue</em> is a linear data structure which models real world queues by having two primary operations namely enqueue and dequeue,</p>\n<h4>Stacks</h4>\n<p>Stack using arrays. Check if a word is a palindrome.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Functions: pop, push, peek, length</span>\n\n<span class=\"token keyword\">let</span> letters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//our stack</span>\n\n<span class=\"token keyword\">let</span> word <span class=\"token operator\">=</span> <span class=\"token string\">\"racecar\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> reverseWord <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//put the letters into the stack</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> word<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    letters<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Pop the stack in a reverse order</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> word<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    reverseWord <span class=\"token operator\">+=</span> letters<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reverseWord <span class=\"token operator\">===</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">+</span> <span class=\"token string\">\" is a palindome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">+</span> <span class=\"token string\">\" is not a palindome\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Arrays</h4>\n<p>Ordered lists.\nUsed when you need order.\nfast access,insertion and removal of elements\nInsertion order is kept.\nElement accessed via indexes.\nIterable using loops.\nSize/length adjus dynamically.\nDuplicate value are allowed.</p>\n<p>Insertion - Depends.</p>\n<ul>\n<li>inseting at the beginning is 0(N)</li>\n<li>inserting at the end is 0(1)</li>\n</ul>\n<p>Removal - Depends\nSearching - 0(N)\nAccess - 0(1)</p>\n<p>push - 0(1)\npop - 0(1)\nshift - 0(N)\nunshift - 0(N)\nconcat - 0(N)\nslice - 0(N)\nsplice - 0(N)\nsort - 0(N * log N)\nforEach/map/filter/reduceâ€¦ - 0(N)</p>\n<h4>Sets</h4>\n<p>Are created with constructor function.\nDoesnâ€™t allow duplicate values.\nInsertion order is not stored.\nElement access and extraction via methods.\nSize/lenght adjusts dynamically.\nDuplicate values are not allowed.\nAllows mixed type of data.\nDeletion and finding of elements is trivial fast.\nCanâ€™t be accessed by index. instead uses <code class=\"language-text\">.has</code> method.</p>\n<h4>Objects</h4>\n<p>We use objects when we:</p>\n<ul>\n<li>donâ€™t need order</li>\n<li>fast access, insertion and removal</li>\n</ul>\n<p>Objects can have methods, keys and values.\nUnordered key values.\nElements accessed via key(proprty name).\nNot iterable (only with for in loop).\nKeys are unique, values are not.\nKeys can be strings, numbers or symbols.\nCan store data and functionality through methods.</p>\n<p>Insertion - 0(1)\nRemoval - 0(1)\nSearching - 0(N)\nAccess - 0(1)</p>\n<p>Object.keys - 0(N)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Object.values - 0(N)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Object.entries - 0(N)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Object.hasOwnProperty - 0(1)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Maps</h4>\n<p>Are ordered key value pairs.\nElement accessed by the keys.\nIterable\nKeys are unique, values arenâ€™t.\nKeys can be anything including referencing values like arrays.\nTheyâ€™re pure data storage optimized for data access.</p>\n<h4>Weakset and Weakmaps</h4>\n<p>Variations of sets and maps.\nValues and keys are only weakly referenced. Garbage collection can delete keys and values if not used in the app.</p>","frontmatter":{"title":"Data Structures and Algorithms in JavaScript","date":"December 10, 2020","description":"Data Structures and Algorithms are important concepts in Computer Science and oftenly come up in software development and related roles interview questions.Let's dive and start learning using javaScript"}},"previous":{"fields":{"slug":"/learn-solidity/"},"frontmatter":{"title":"Learn Solidity - Smart Contract Oriented Language"}},"next":{"fields":{"slug":"/learn-typescript/"},"frontmatter":{"title":"Learn TypeScript"}}},"pageContext":{"id":"cdc0c3eb-2e4a-5497-99d3-9507ffd14a18","previousPostId":"1f9d1b5f-9173-566c-8147-64033e26a4f5","nextPostId":"22c6a742-5f1a-5c11-bbb3-cbe96d295bf0"}},"staticQueryHashes":["2841359383","3257411868"]}