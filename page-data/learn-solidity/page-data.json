{"componentChunkName":"component---src-templates-blog-post-js","path":"/learn-solidity/","result":{"data":{"site":{"siteMetadata":{"title":"bwake blog"}},"markdownRemark":{"id":"1f9d1b5f-9173-566c-8147-64033e26a4f5","excerpt":"Solidity is a smart contract development language.\nIt is statically typed,supports inheritance, libraries etc. Solidity code is written in files with .sol…","html":"<p><strong>Solidity</strong> is a smart contract development language.\nIt is statically typed,supports inheritance, libraries etc.</p>\n<p>Solidity code is written in files with <strong>.sol</strong> extension. You can use remix browser editor here <a href=\"http://remix.ethereum.org\">Remix</a> .It allows you to compile and deploy your contracts on the go.</p>\n<p><strong>pragma</strong> declares the version of solidity compiler to use.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.5</span><span class=\"token number\">.3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>contracts</strong> are the building blocks of smart contracts.\nlets write our first contract</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Variables in solidity</h3>\n<p><strong>state variables</strong>  are written in the blockchain.They’re permanently stored in contract storage.</p>\n<p><strong>local variables(memory)</strong> − are variables whose values are present till function is executing.\n<strong>Calldata</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//state variable</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> num1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mynumber</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> _num2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//local variable</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> num2 <span class=\"token operator\">=</span> _num2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Strings</h4>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> greetings <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I’ts expensive to use the ethereum blockchain as a data storage hence using strings in your contracts is discouraged.\nYou can store large amount of data records on <strong>IPFS</strong>. It’s cheaper and public.</p>\n<h4>Functions</h4>\n<p>Function are categorized according to <strong>visibility</strong> i.e <em>public, private, internal and external</em> and <strong>behaviour</strong> i.e <em>payable</em>,<em>view</em> and <em>pure</em>.\nThere are functions that:</p>\n<ul>\n<li>\n<p><em>Create transactions on the blockchain</em>. They cost gas to call them.</p>\n<ul>\n<li>Statements that change the state of the blockchain:</li>\n<li>Writing to state variables.</li>\n<li>Emitting events</li>\n<li>Creating other contracts</li>\n<li>Using selfdestruct</li>\n<li>Sending Ether via calls</li>\n<li>Calling any function bot marked as <strong>view</strong> or <strong>pure</strong>.</li>\n<li>Using low-level calls</li>\n<li>Using inline assembly that contains certain opcodes</li>\n</ul>\n</li>\n<li>\n<p><em>Functions that don’t create transactions on the blockchain</em>.  This can be called for free.</p>\n<ul>\n<li><strong>View</strong> functions doesn’t change the state of the blockchain</li>\n<li><strong>Pure</strong> functions does not change state nor read state variables in the blockchain.</li>\n<li>\n<p>Statement considered reading from the state.</p>\n<ul>\n<li>Reading from state variables.</li>\n<li>Accessing <em>address(this).balance</em> or <em>&#x3C; address >.balance</em>.</li>\n<li>Accessing any member of <em>block, tx, msg</em> except <em>msg.sig and msg.data</em></li>\n<li>Calling any function not marked pure.</li>\n<li>Using inline assembly that contains certain opcodes</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n         \n  <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> _name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n      name <span class=\"token operator\">=</span> _name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//View Functions</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> add <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//Pure Functions</span>\n  <span class=\"token keyword\">function</span> addNum <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">returns</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>solidity functions can return multiple values</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token keyword\">function</span> <span class=\"token function\">returnMultipleValuesA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">returnMultipleValuesB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//Destructing Assignments</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">destructuredAssignments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">returnMultipleValuesA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//lEaving values cout</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In <strong>public functions</strong> you cannot input:</p>\n<ul>\n<li>maps</li>\n<li>multi-dimensional arrays(unfixed size).</li>\n</ul>\n<h4>Function Modifiers</h4>\n<p>Functions modifiers are reusable code that can be attached to a function either before or after the function is executed.\nThey can be used to restrict write access, validate input and prevent reentrancy hack</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.5.3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{</span>\n <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n     owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not Owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">modifier</span> <span class=\"token function\">validAddress</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_addr <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not valid address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">function</span> <span class=\"token function\">changeOwner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newOwner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> onlyOwner <span class=\"token function\">validAddress</span><span class=\"token punctuation\">(</span>_newOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     \n     owner <span class=\"token operator\">=</span> _newOwner<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">//No reentrency</span>\n <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n <span class=\"token builtin\">bool</span> locked<span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">modifier</span> <span class=\"token function\">noReentrancy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>locked<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Locked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n     locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n     locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">function</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> noReentrancy <span class=\"token punctuation\">{</span>\n     x <span class=\"token operator\">-=</span> i<span class=\"token punctuation\">;</span>\n     \n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Ether</em> is used to pay block rewards, pay transaction fee and can be transferred betwwen accounts.\n<em>Wei</em> one ether equals to 10 ^ 18 wei.</p>\n<p><em>Gas</em> - total amount of computation used to proecess each transaction on the blockchain is measured in gas.\nThe purpose of gas is to limit the amount of computations that a transction can do. eg. an eternal loop.</p>\n<p><em>Gas limit</em> is the maximum amount of gas you’re willing to use.Set by you.\n<em>Block gas limit</em> is the maximum amount alowed in the blockchain set by the network.</p>\n<p><em>Gas price</em> - Is the amount of ether you’re willing for one gas.</p>\n<p><em>Ether = Gas limit * Gas Price</em></p>\n<p>When your transaction runs out of gas it’s aborted but you still pay for the gas already used.</p>","frontmatter":{"title":"Learn Solidity - Smart Contract Oriented Language","date":"November 03, 2020","description":"Solidity is an object-oriented, high-level language for implementing smart contracts. It's designed to target the Ethereum Virtual Macine to implement Smart Contracts. It's influenced by C++, Python and JavaScript. So it will be easy to pick if you're familiar with any of the languages."}},"previous":{"fields":{"slug":"/install-mariadb-debian/"},"frontmatter":{"title":"How to install Mariadb on linux debian"}},"next":{"fields":{"slug":"/data-structures-in-js/"},"frontmatter":{"title":"Data Structures and Algorithms in JavaScript"}}},"pageContext":{"id":"1f9d1b5f-9173-566c-8147-64033e26a4f5","previousPostId":"e8e398af-0461-5776-83bd-f3fa77765ec9","nextPostId":"cdc0c3eb-2e4a-5497-99d3-9507ffd14a18"}},"staticQueryHashes":["2841359383","3257411868"]}